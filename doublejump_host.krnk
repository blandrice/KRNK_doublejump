# Server Script runs only on Hosted server & not in test mode
# KrunkScript Copyright (C) Yendis Entertainment Pty Ltd
# 
# Add custom actions here

# ===================================================================
# SETTINGS:
num MAX_JUMPCOUNT = 2; # 2 is "doublejump", 3 is "triplejump"
bool WALLJUMP_REFRESHS = true;
bool ENABLE_CROUCHJUMP = true; # lower height for crouch jump, also
                                # applies "moonjump" mid-air physics

# HARD-CODED NUMBERS - DON'T TOUCH
num MS_DURATION_UNCROUCH = 166;
num HEIGHT_JUMP = 0.0793; # 60FPS, max clearance 17.9 units
num HEIGHT_CROUCHJUMP = 0.0595; # 60FPS, max clearance 10.2 units
# ===================================================================


obj[] playersExtraProps = obj[];
num timeNow = 0;
# Runs when the game starts
public action start() {

}

# Runs every game tick
public action update(num delta) {
    timeNow = GAME.TIME.now();
    if(!!lengthOf playersExtraProps && GAME.TIME.now() % 500 < delta){
        obj[] players = GAME.PLAYERS.list();
        GAME.log('##################################');
        for(num i = 0; i < lengthOf players; i++){
            obj player = players[i];
            GAME.log('Player jumps: ' + toStr (num) player.sid + '; ' + toStr ((num)player.extraProps.jumpCnt));
        }
    }
}

# Player spawns in
public action onPlayerSpawn(str id) {
    obj player = GAME.PLAYERS.findByID(id);
    
    if((num) player.sid > lengthOf playersExtraProps){
        addTo playersExtraProps {};
    } 

    obj playerExtraProps = playersExtraProps[(num) player.sid - 1];
    player.extraProps = playerExtraProps;
    playerExtraProps.jumpPressed = false;
    playerExtraProps.jumpCount = 0;
    playerExtraProps.tLastCrouch = 0;
}

# obj  playerJumpStatus = {id: "name", holdJump: false, jumpcount: 0};
obj jumpStatus = {id: 'name', jumpPressed: false, jumpCount: 0, tLastCrouch: 0, idx: 0};
# str [][] list_PlrJStatus = str[][str['name','0','0', '0', '0']];
obj[] list_PlrJStatus = obj[jumpStatus];

obj action getPlayerJumpStatus (str id) {
    num i = 0;
	for (i = 0; i < lengthOf list_PlrJStatus; i++) {
        if ((str)list_PlrJStatus[i].id == id) {
            return list_PlrJStatus[i];
        }
    } # else
    addTo list_PlrJStatus {id: id, jumpPressed: false, jumpCount: 0, tLastCrouch: 0,idx: i};
    return list_PlrJStatus[lengthOf list_PlrJStatus - 1];
}

# # Player update
# public action onPlayerUpdate(str id, num delta, static obj inputs) {
#     obj player = GAME.PLAYERS.findByID(id);
    
#     if(!!player.extraProps.isSpectator){
#         playersExtraProps[(num) player.sid - 1].isSpectator = false;
#     }
# }


public action onPlayerUpdate(str id, num delta, static obj inputs) {
    obj player = GAME.PLAYERS.findByID(id);
    #player.disableDefault("jump");
    # playersExtraProps[(num) player.sid - 1]


    # obj tPlrJStatus = getPlayerJumpStatus(id);
    
    
    if ((bool) inputs.crouch) {
        # tPlrJStatus.tLastCrouch = timeNow;
        playersExtraProps[(num) player.sid - 1].tLastCrouch = timeNow;
    }
    if ((bool) player.onGround) {
        # tPlrJStatus.jumpCount = 0;
        playersExtraProps[(num) player.sid - 1].jumpCnt = 0;

    } else if (WALLJUMP_REFRESHS && (bool) player.onWall && (bool) inputs.jump) {
        # tPlrJStatus.jumpCount = 1;
        playersExtraProps[(num) player.sid - 1].jumpCnt = 0;

    }
    if((bool) inputs.jump) {
        if((bool)playersExtraProps[(num) player.sid - 1].jumpPressed == false  
            && (num) playersExtraProps[(num) player.sid - 1].jumpCnt > 0 
            && !(bool) player.onGround) {
			# if ((num) inputs.crouch) {
            # player.velocity.y = HEIGHT_CROUCHJUMP;	
            if (ENABLE_CROUCHJUMP && (timeNow - ((num) playersExtraProps[(num) player.sid - 1].tLastCrouch)) < MS_DURATION_UNCROUCH) {
                player.velocity.y = Math.lerp(HEIGHT_CROUCHJUMP,HEIGHT_JUMP,(timeNow - ((num) playersExtraProps[(num) player.sid - 1].tLastCrouch))/MS_DURATION_UNCROUCH);	
                
            } else {
                player.velocity.y = HEIGHT_JUMP;	    
            }
			(num) playersExtraProps[(num) player.sid - 1].jumpCnt--;
        }
        playersExtraProps[(num) player.sid - 1].jumpPressed = true;
	} else {
        playersExtraProps[(num) player.sid - 1].jumpPressed = false;
    }
    # GAME.log((num) tPlrJStatus.id + " " + toStr (num) tPlrJStatus.jumpPressed + " " + toStr (num) tPlrJStatus.jumpCount + " " + toStr (num) tPlrJStatus.tLastCrouch);
}

# Server receives network message
public action onNetworkMessage(str id, obj data, str playerID) {

}

# When a player leaves the server
public action onPlayerLeave(str playerID) {

}

# Runs when the round ends
public action onGameEnd() {
    playersExtraProps = obj[];
}

public action onCustomTrigger(str playerID, str customParam) {
	if (customParam=="addJump") {
        obj plr = GAME.PLAYERS.findByID(playerID);
        playersExtraProps[(num) plr.sid - 1].jumpCnt = ((num) playersExtraProps[(num) plr.sid - 1].jumpCnt+1 > MAX_JUMPCOUNT) ? MAX_JUMPCOUNT : ((num) playersExtraProps[(num) plr.sid - 1].jumpCnt+1);
        GAME.NETWORK.send("jumpUpdate", {cnt:playersExtraProps[(num) plr.sid - 1].jumpCnt}, playerID);
	}
}
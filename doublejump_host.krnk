# ===================================================================
# SETTINGS:
num MAX_JUMPCOUNT = 2; # 2 is "doublejump", 3 is "triplejump"
bool WALLJUMP_REFRESHS = true;
bool ENABLE_CROUCHJUMP = true; # lower height for crouch jump, also
                                # applies "moonjump" mid-air physics

# HARD-CODED NUMBERS - DON'T TOUCH
num MS_DURATION_UNCROUCH = 166;
num HEIGHT_JUMP = 0.0793; # 60FPS, max clearance 17.9 units
num HEIGHT_CROUCHJUMP = 0.0595; # 60FPS, max clearance 10.2 units
# ===================================================================

num timeNow = 0;

# Runs every game tick
public action update(num delta) {
    timeNow = GAME.TIME.now();
}

public action onPlayerUpdate(str id, num delta, obj inputs) {
    timeNow = GAME.TIME.now();
    obj player = GAME.PLAYERS.findByID(id);
    
    if ((bool) inputs.crouch) {
        player.tLastCrouch = timeNow;
    }
    if ((bool) player.onGround) {
        player.jumpCnt = MAX_JUMPCOUNT-1;
    } else if (WALLJUMP_REFRESHS && (bool) player.onWall && (bool) inputs.jump) {
<<<<<<< Updated upstream
        # tPlrJStatus.jumpCount = 1;
        playersExtraProps[(num) player.sid - 1].jumpCnt = MAX_JUMPCOUNT-1;

    }
    if((bool) inputs.jump && (num) playersExtraProps[(num) player.sid - 1].jumpCnt < MAX_JUMPCOUNT) {
        if((bool)playersExtraProps[(num) player.sid - 1].jumpPressed == false) {
			if ((num)playersExtraProps[(num) player.sid - 1].jumpCnt == 1) {
				# if ((num) inputs.crouch) {
					# player.velocity.y = HEIGHT_CROUCHJUMP;	
                if (ENABLE_CROUCHJUMP && (timeNow - ((num) playersExtraProps[(num) player.sid - 1].tLastCrouch)) < MS_DURATION_UNCROUCH) {
					player.velocity.y = Math.lerp(HEIGHT_CROUCHJUMP,HEIGHT_JUMP,(timeNow - ((num) playersExtraProps[(num) player.sid - 1].tLastCrouch))/MS_DURATION_UNCROUCH);	
                    
                } else {
                	player.velocity.y = HEIGHT_JUMP;	    
                }
                
			}
			(num) playersExtraProps[(num) player.sid - 1].jumpCnt++;
            playersExtraProps[(num) player.sid - 1].jumpPressed = true;
        }
=======
        player.jumpCnt = MAX_JUMPCOUNT-1;

    }
    if((bool) inputs.jump) {
        if((bool)player.jumpPressed == false && (num) player.jumpCnt > 0 && !(bool) player.onGround) {
            if (!(bool) player.onWall && WALLJUMP_REFRESHS) {
                if (ENABLE_CROUCHJUMP && (timeNow - ((num) player.tLastCrouch)) < MS_DURATION_UNCROUCH) {
                    player.velocity.y = Math.lerp(HEIGHT_CROUCHJUMP,HEIGHT_JUMP,(timeNow - ((num) player.tLastCrouch))/MS_DURATION_UNCROUCH);	
                } else {
                    player.velocity.y = HEIGHT_JUMP;	    
                }
                (num) player.jumpCnt--;
            }
        }
        player.jumpPressed = true;
>>>>>>> Stashed changes
	} else {
        player.jumpPressed = false;
    }
<<<<<<< Updated upstream
    # GAME.log((num) tPlrJStatus.id + " " + toStr (num) tPlrJStatus.jumpPressed + " " + toStr (num) tPlrJStatus.jumpCount + " " + toStr (num) tPlrJStatus.tLastCrouch);
}


# Called from Custom Trigger Action
public action onCustomTrigger(str playerID, str customParam) {

}

# Server receives network message
public action onNetworkMessage(str id, obj data, str playerID) {

}

# When a player leaves the server
public action onPlayerLeave(str playerID) {

}

# Runs when the round ends
public action onGameEnd() {
    playersExtraProps = obj[];
=======
>>>>>>> Stashed changes
}